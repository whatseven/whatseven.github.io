<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whatseven的博客</title>
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://http://blog.llsevenr.cn/"/>
  <updated>2017-08-11T14:12:48.911Z</updated>
  <id>http://http://blog.llsevenr.cn/</id>
  
  <author>
    <name>whatseven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建Git服务器及多人协作开发常见命令</title>
    <link href="http://http://blog.llsevenr.cn/2017/08/10/%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    <id>http://http://blog.llsevenr.cn/2017/08/10/搭建Git服务器及多人协作开发常见命令/</id>
    <published>2017-08-10T10:35:59.000Z</published>
    <updated>2017-08-11T14:12:48.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h1><p>Github的项目必须为开放的并且在中国的访问速度如无特殊配置通常访问很慢，于是便想在自己的服务器上搭建Git仓库，同时也具备多人协作开发的能力。</p>
<h2 id="配置Git和用户"><a href="#配置Git和用户" class="headerlink" title="配置Git和用户"></a>配置Git和用户</h2><p>首先安装Git</p>
<p><code>sudo apt install git</code></p>
<p>配置单独用来访问仓库的git用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">groupadd git</div><div class="line">adduser git -g git</div></pre></td></tr></table></figure>
<h2 id="创建SSL证书登录"><a href="#创建SSL证书登录" class="headerlink" title="创建SSL证书登录"></a>创建SSL证书登录</h2><p>在支持bash的命令行下，输入</p>
<p><code>ssh-keygen -C &#39;your@email.com&#39; -t rsa</code></p>
<p>为你生成rsa密钥，可以直接一路回车，执行默认操作，生成的密钥可以在这儿找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">C://users//&lt;电脑账户名&gt;//.ssh</div><div class="line">├── id_rsa</div><div class="line">└── id_rsa.pub #公钥 服务端需要里边内容验证连接着身份</div></pre></td></tr></table></figure></p>
<p>将SSH添加到管理</p>
<p><code>ssh-add id_rsa</code></p>
<p>将公钥里面的内容完整输入至<code>/home/git/.ssh/authorized_keys</code>，一行一个密钥</p>
<h2 id="Tips：多公钥管理"><a href="#Tips：多公钥管理" class="headerlink" title="Tips：多公钥管理"></a>Tips：多公钥管理</h2><p>在<code>.ssh</code>目录下配置<code>config</code>文件，<strong>再将SSH加入SSH管理</strong>，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Host github.com             //连接域名</div><div class="line">  HostName github.com       //域名名称</div><div class="line">  User whatseven            //用户</div><div class="line">  IdentityFile C:\Users\whatseven\.ssh\id_rsa_github    //对应私钥</div><div class="line">  PreferredAuthentications publickey</div></pre></td></tr></table></figure></p>
<h1 id="Git多人协作开发常用命令"><a href="#Git多人协作开发常用命令" class="headerlink" title="Git多人协作开发常用命令"></a>Git多人协作开发常用命令</h1><p>完成上述步骤，就能够在自己的服务器上建立仓库并且作为远程分支与本地分支建立联系了，下面是在多人协作开发的一些常用的Git命令。</p>
<h2 id="建立裸仓库"><a href="#建立裸仓库" class="headerlink" title="建立裸仓库"></a>建立裸仓库</h2><p>在建好的服务器里新建文件夹，在文件夹下使用<code>git init --bare</code>新建裸仓库，只存放版本库信息。</p>
<p>开发人员A上用<code>git clone 仓库地址 仓库在本机的命名</code>克隆仓库，开始自己的本地开发。</p>
<h3 id="Tips：为什么要建立裸仓库？"><a href="#Tips：为什么要建立裸仓库？" class="headerlink" title="Tips：为什么要建立裸仓库？"></a>Tips：为什么要建立裸仓库？</h3><p>在Git中，如果向普通代码仓库push的话，Git会将推送的内容与工作文件进行比较，它会认为工作文件发生改变，从而影响工作树，常见的是在想远程目标的当前分支push代码时，在远程终端必须使用<code>git reset --hard</code>。而裸代码仓库由于没有工作树，所以push所含的变化仅影响裸代码仓库的版本控制。</p>
<p><strong>在裸仓库中，工作目录下除了版本库信息没有任何东西，会给大家造成一个误解以为裸仓库只记录版本，没有文件。其实在Git系统中，文件是通过不同的对象例如索引，树，块存与版本库里面的，所以裸仓库看似工作目录是空的，在克隆裸仓库是git会将对象从版本库取出并根据版本更改信息组织到正确的位置</strong></p>
<p>在开发过程中，一般会将项目分为几个分支。</p>
<blockquote>
<p><strong>Git分支策略</strong></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otbwgn2nv.bkt.clouddn.com/de249adc849a5e3ed721b3f4fc397e4d.png" alt="Git分支策略" title="">
                </div>
                <div class="image-caption">Git分支策略</div>
            </figure>
</blockquote>
<ol>
<li><strong>master</strong>分支应该保存重大的版本或节点，开发前应保持远程与本地同步</li>
<li><strong>dev</strong>是日常开发分支，平时的开发应在dev上进行，开发前应保持远程与本地同步</li>
<li>剩下的是个人分支，个人的开发在个人分支上进行，在每天或者一个阶段的工作结束后每个人将自己的代码合并到dev分支上。个人分支不用同步至远程分支</li>
</ol>
<h2 id="开发实例"><a href="#开发实例" class="headerlink" title="开发实例"></a>开发实例</h2><p>下面通过两个开发人员实例演示多人开发：</p>
<p>开发人员A通过<code>git clone git@111.111.111.111:/home/git/repo/test.git test.git</code>将远程的版本库克隆至本机</p>
<p>如无dev分支，A通过<code>git checkout -b dev</code>从<strong>master</strong>分支创建<strong>dev</strong>分支</p>
<p>A再次通过<code>git checkout -b A</code>从<strong>dev</strong>分支上创建自己的开发分支</p>
<p>A在工作目录里新建内容为”A”的<strong>A.txt</strong>，再创建内容为”公共”的<strong>公共.txt</strong></p>
<p>A通过<code>git add A.txt 公共.txt</code>与<code>git commit -m &quot;init A,公共&quot;</code>提交更改</p>
<p>当A完成阶段性工作后，通过<code>git checkout dev</code>切换至开发分支，再通过<code>git merge --no-ff A</code>将<strong>A</strong>分支合并到<strong>dev</strong>分支,如有冲突则在文件中去删除多余部分</p>
<p>A剩下的工作是要将自己的工作推到大家代码的源头–位于远程的裸仓库中，在Git中，本机Git版本库与远程库的连接是基于分支的，例如本机的<strong>master</strong>与远程的<strong>master</strong>有一条链接，本机的<strong>dev</strong>也应该与远程<strong>dev</strong>有一个链接。</p>
<p>A通过在<strong>dev</strong>分支上<code>git push -u origin dev</code>将本机的<strong>dev</strong>分支的更新推送到远程<strong>dev</strong>分支上去，<code>-u</code>选项是指在未建立链接的情况下建立一条链接，以后推送更新就只用<code>git push</code>即可</p>
<p>此时，A的工作已经全部做完了，当B开始工作时，他必须获取远程库的最新情况以保证自己的工作是建立在最新的工作上的，它可以在建立了链接的情况下通过<code>git pull</code>将远程更新拉到本地，后续操作类似A。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建Git服务器&quot;&gt;&lt;a href=&quot;#搭建Git服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建Git服务器&quot;&gt;&lt;/a&gt;搭建Git服务器&lt;/h1&gt;&lt;p&gt;Github的项目必须为开放的并且在中国的访问速度如无特殊配置通常访问很慢，于是便想在自己的
    
    </summary>
    
      <category term="Git" scheme="http://http://blog.llsevenr.cn/categories/Git/"/>
    
    
      <category term="Git" scheme="http://http://blog.llsevenr.cn/tags/Git/"/>
    
      <category term="分支策略" scheme="http://http://blog.llsevenr.cn/tags/%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常见集合操作</title>
    <link href="http://http://blog.llsevenr.cn/2017/08/09/JavaScript%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/"/>
    <id>http://http://blog.llsevenr.cn/2017/08/09/JavaScript常见集合操作/</id>
    <published>2017-08-09T13:37:20.000Z</published>
    <updated>2017-08-10T13:56:49.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h2><h3 id="for循环-效率最高"><a href="#for循环-效率最高" class="headerlink" title="for循环(效率最高)"></a>for循环(效率最高)</h3><ul>
<li>优点：JavaScript最普遍的for循环，执行效率最高</li>
<li>缺点：无法遍历对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(let i=0;i&lt;array.length,i++)&#123;</div><div class="line">    //operation</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for…in循环-效率较低"><a href="#for…in循环-效率较低" class="headerlink" title="for…in循环(效率较低)"></a>for…in循环(效率较低)</h3><ul>
<li>优点：唯一一个能够获取对象的属性名的遍历方式</li>
<li>缺点：会将对象通过继承得到的属性一齐遍历，造成非预料的结果且效率较低</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//会访问非继承的属性</div><div class="line">for(attr in object)&#123;//attr作为属性名</div><div class="line">    //object[attr]访问值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//避免访问继承的属性</div><div class="line">for(attr in object)&#123;//attr作为属性名</div><div class="line">    if(object.hasOwnProperty(attr))&#123;</div><div class="line">        //object[attr]访问值        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="for…of循环-效率较高"><a href="#for…of循环-效率较高" class="headerlink" title="for…of循环(效率较高)"></a>for…of循环(效率较高)</h3><ul>
<li>优点：能够快速访问非继承属性值</li>
<li>缺点：需要ES6支持</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(item of object)&#123;</div><div class="line">    //item访问值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="forEach方法-数组内置高阶方法，含义清晰"><a href="#forEach方法-数组内置高阶方法，含义清晰" class="headerlink" title="forEach方法(数组内置高阶方法，含义清晰)"></a>forEach方法(数组内置高阶方法，含义清晰)</h3><ul>
<li>优点：函数式编程，简洁，快速领会代码含义</li>
<li>缺点：无法对对象使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array.forEach(function(item,index,array))&#123;</div><div class="line">    //item为值</div><div class="line">    //index为索引</div><div class="line">    //array为被访问数组</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><ol>
<li>在对对象进行遍历时，如不需要访问属性名选择<code>for...of</code>循环，如需访问属性名选择<code>for...in</code>循环</li>
<li>在对数组进行访问时，使用<code>forEach</code>得到较好的可读性，传统的<code>for</code>循环能够带来很高的性能及拓展性</li>
</ol>
<h2 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h2><p>在小波老师提倡的想机器一样思考中，编程问题的解决被分为了输入，处理和输出</p>
<blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://otbwgn2nv.bkt.clouddn.com/ddbb7a0501334ed5b6fc3cf6adba1c8c.png" alt="像机器一样思考" title="">
                </div>
                <div class="image-caption">像机器一样思考</div>
            </figure>
<p>引用自<a href="https://www.zybuluo.com/jtong/note/403738" target="_blank" rel="external">像机器一样思考（一）—— 宏观的基础</a></p>
</blockquote>
<p>处理，是对输入数据的处理，就可以分为从输入的数据中提炼出一定的有价值的数据，并对他们做出一些操作，得到希望得到的有价值的东西，并将他输出</p>
<h3 id="Map映射"><a href="#Map映射" class="headerlink" title="Map映射"></a>Map映射</h3><p>Map映射是将输入的数据中有价值的东西提取出来，转化为更有利于处理的格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let dataAfterProcess = array.map(function(item,index,array)&#123;</div><div class="line">    //item为值</div><div class="line">    //index为索引</div><div class="line">    //array为被访问数组</div><div class="line">    return ;//返回dataAfterProcess中希望被添加的元素</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Reduce计算"><a href="#Reduce计算" class="headerlink" title="Reduce计算"></a>Reduce计算</h3><p>Reduce计算以提取好的数据输入，并获得最终的<strong>一个</strong>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let output = array.reduce(function(accumulator, currentValue, currentIndex, array)&#123;</div><div class="line">    //accumulator为输出结果</div><div class="line">    //currentValue为遍历数组目前的值</div><div class="line">    //currentIndex为遍历数组目前的索引</div><div class="line">    //array为被访问数组</div><div class="line">    return ;//返回希望累加的操作</div><div class="line">&#125;,0);//0为计算结果的初始值，默认为数组第一个元素</div></pre></td></tr></table></figure></p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>在完成JS练习中，我时常会遇到以下问题待解决：</p>
<ol>
<li>在<code>Map</code>操作中，经常会遇到需要根据已有的目标数组的情况做出相应的映射操作，但目前尚未发现怎样在Map循环中检查已映射的目标数组</li>
<li>为对象实现接口使对象也具有<code>MapReduce</code>操作的能力</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集合的遍历&quot;&gt;&lt;a href=&quot;#集合的遍历&quot; class=&quot;headerlink&quot; title=&quot;集合的遍历&quot;&gt;&lt;/a&gt;集合的遍历&lt;/h2&gt;&lt;h3 id=&quot;for循环-效率最高&quot;&gt;&lt;a href=&quot;#for循环-效率最高&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="JavaScript" scheme="http://http://blog.llsevenr.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://http://blog.llsevenr.cn/tags/JavaScript/"/>
    
      <category term="collection" scheme="http://http://blog.llsevenr.cn/tags/collection/"/>
    
      <category term="集合" scheme="http://http://blog.llsevenr.cn/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="遍历" scheme="http://http://blog.llsevenr.cn/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
</feed>
